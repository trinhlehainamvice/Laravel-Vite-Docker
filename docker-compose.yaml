version: '4.2'

services:
  mysql:
    image: mysql
    container_name: mysql
    restart: unless-stopped
    tty: true
    ports:
      - 3306:3306
    environment:
      # NOTE: need to match DB_*** env vars in Laravel project .env file
      - MYSQL_ROOT_PASSWORD=secret
      - MYSQL_DATABASE=laravel
      - MYSQL_USER=laravel
      - MYSQL_PASSWORD=secret
    volumes:
      - dbdata:/var/lib/mysql
    networks:
      - laravel_network

  # phpmyadmin:
  #   image: phpmyadmin
  #   restart: unless-stopped
  #   ports:
  #     - 8080:80
  #   environment:
  #     - PMA_HOST=mysql
  #     - PMA_PORT=3306
  #   depends_on:
  #     - mysql
  #   networks:
  #     - laravel_network

  laravel:
    container_name: laravel
    restart: unless-stopped
    tty: true
    build:
      context: ./laravel
      dockerfile: S6Overlay.Dockerfile
      args:
        - UID=82
        - GID=82
    ports:
      - 80:8080
      # - 443:8443
    volumes:
      - laravel_repo:/var/www/html
    depends_on:
      # NOTE: Laravel setup require connect to database
      # so need to wait until mysql is ready
      # https://stackoverflow.com/questions/42567475/docker-compose-check-if-mysql-connection-is-ready 
      mysql:
        condition: service_started
    networks:
      - laravel_network

  webdev:
    container_name: webapp
    build:
      context: ./webapp
      dockerfile: Dev.Dockerfile
    # NOTE: watch only supported from Docker Composer version 2.22 and later. 
    # https://docs.docker.com/compose/file-watch/
    # Install latest Docker Desktop
    develop:
      watch:
        - action: sync
          path: ./webapp
          target: /var/www/html/web
        - action: rebuild
          path: ./webapp/package.json
    restart: unless-stopped
    tty: true
    ports:
      - 5173:5173
    volumes:
      - laravel_repo:/var/www/html
      # NOTE: volume mount process is happened AFTER docker image is built
      # mount process will overwrite target directory with contents of named volume
      # so all contents created in Dockerfile will be lost
      # tell Docker that webapp container has its own persistent volume
      - webapp_repo:/var/www/html/web
    depends_on:
      - laravel
    networks:
      - laravel_network

volumes:
  dbdata:
    driver: local
  laravel_repo:
    driver: local
  webapp_repo:
    driver: local

networks:
  laravel_network:
    driver: bridge
